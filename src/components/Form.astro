--- 
import { server } from '@/actions/index';
---

<form
  id="contact-form"
  action={server.contactForm}
  method="POST"
  class="flex flex-col gap-6 mb-8"
>
  <div class="grid grid-cols-2 gap-4">
    <input
      type="text"
      name="firstName"
      placeholder="First Name"
      class="input input-bordered w-full"
      required
    />
    <input
      type="text"
      name="lastName"
      placeholder="Last Name"
      class="input input-bordered w-full"
      required
    />
  </div>
  <input
    type="email"
    name="email"
    placeholder="Email Address"
    class="input input-bordered w-full"
    required
  />
  <input
    type="tel"
    name="phone"
    placeholder="Phone Number"
    class="input input-bordered w-full"
    required
  />

  <textarea
    name="message"
    class="textarea textarea-bordered w-full"
    rows="5"
    placeholder="Your Message"
    required></textarea>

  <button type="submit" class="btn btn-primary btn-block">Submit</button>
</form>

<script>
  import { isInputError, actions } from "astro:actions"; 

  const form = document.getElementById("contact-form") as HTMLFormElement;

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const { data, error } = await actions.contactForm(formData);

    if (data) {
      form.reset(); 
    }

    if (error && isInputError(error)) {
      console.error("Input error:", error);
    }
  });

  // Custom validation for radio buttons
  // https://jsbin.com/nucekozegi/1/edit?html,output
  for (const fieldset of document.querySelectorAll(
    "fieldset[data-require-one]"
  )) {
    const updateValidity = () => {
      const elements = Array.from(
        (fieldset as HTMLFieldSetElement).elements
      ).filter(
        (element): element is HTMLInputElement =>
          element instanceof HTMLInputElement
      );
      if (elements.some((e) => e.checked)) {
        elements[0].setCustomValidity("");
      } else {
        elements[0].setCustomValidity("At least one required!");
      }
    };
    const form = (fieldset as HTMLFieldSetElement).form;
    if (form) {
      form.addEventListener("change", updateValidity);
    }
    updateValidity();
  }
</script>

<!-- <script>
  import actions from "astro:actions";

  async () => {
    const { data, error } = await actions.contactForm.fetch({
      firstName: "Mohan",
      lastName: "Kumar",
      email: "mohan@drn.ai",
      phone: "1234567890",
      message: "Hello, world!",
    });

    if (error) {
      console.error(error);
    } else {
      console.log(data);
    }
  };
</script> -->

<!-- <script>
  // Client-side form handling
  const form = document.querySelector("form");

  if (form instanceof HTMLFormElement) {
    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(form);
      const data = Object.fromEntries(formData);

      try {
        const response = await fetch("/api/submit", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        if (response.ok) {
          alert("Form submitted successfully!");
          form.reset();
        } else {
          throw new Error("Form submission failed");
        }
      } catch (error) {
        alert(
          "Error submitting form: " +
            (error instanceof Error ? error.message : "Unknown error")
        );
      }
    });
  }
</script> -->
